name: ci

on:
  workflow_dispatch:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * *'  # every day at midnight

#Global vars
env:
  BUILD_DOCKER_FILE_UBUNTU_BIONIC: ci/Dockerfile-ubuntu-bionic-for-pmacct
  BUILD_DOCKER_TAG_UBUNTU_BIONIC: ci/ubuntu-bionic-for-pmacct
  BUILD_DOCKER_FILE_CENTOS_8: ci/Dockerfile-centos-8-for-pmacct
  BUILD_DOCKER_TAG_CENTOS_8: ci/centos8-for-pmacct

jobs:

  ### Step 1: build container images
  builder-ubuntu-docker:
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout pmacct
        uses: actions/checkout@v2
        with:
          path: pmacct

      - name: Build docker image for Ubuntu Bionic
        run: |
          cd pmacct
          docker build -f $BUILD_DOCKER_FILE_UBUNTU_BIONIC -t $BUILD_DOCKER_TAG_UBUNTU_BIONIC .
          mkdir -p /tmp/docker/
          docker save -o /tmp/docker/registry_ubuntu.tar $BUILD_DOCKER_TAG_UBUNTU_BIONIC

      - name: Artifact docker image
        uses: actions/upload-artifact@v2.2.2
        with:
          name: registry_ubuntu
          retention-days: 1
          path: |
            /tmp/docker

  builder-centos-docker:
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout pmacct
        uses: actions/checkout@v2
        with:
          path: pmacct

      - name: Build docker image for Centos 8
        run: |
          cd pmacct
          docker build -f $BUILD_DOCKER_FILE_UBUNTU_BIONIC -t $BUILD_DOCKER_TAG_UBUNTU_BIONIC .
          mkdir -p /tmp/docker/
          docker save -o /tmp/docker/registry_centos.tar $BUILD_DOCKER_TAG_UBUNTU_BIONIC

      - name: Artifact docker image
        uses: actions/upload-artifact@v2.2.2
        with:
          name: registry_centos
          retention-days: 1
          path: |
            /tmp/docker

  ### Step 2: permutations
  build-and-test-ubuntu:
    needs: builder-ubuntu-docker
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        CONFIG_FLAGS: ["--enable-debug --enable-mysql --enable-pgsql --enable-sqlite3 --enable-kafka --enable-geoipv2 --enable-jansson --enable-rabbitmq --enable-nflog --enable-ndpi --enable-zmq --enable-avro --enable-serdes --enable-redis", "--enable-mysql --enable-pgsql --enable-sqlite3 --enable-kafka --enable-geoipv2 --enable-jansson --enable-rabbitmq --enable-nflog --enable-ndpi --enable-zmq --enable-avro --enable-serdes --enable-redis", "--enable-debug --enable-jansson --enable-zmq --enable-kafka", "--enable-jansson --enable-zmq --enable-kafka", "--enable-debug --enable-jansson --enable-zmq", "--enable-jansson --enable-zmq", "--enable-debug --enable-jansson --enable-kafka --enable-avro --enable-serdes", "--enable-jansson --enable-kafka --enable-avro --enable-serdes", "--enable-debug --enable-jansson --enable-kafka", "--enable-jansson --enable-kafka", "--enable-debug --enable-zmq", "--enable-zmq", "--enable-debug --enable-jansson", "--enable-jansson", "--enable-debug", ""]
    steps:

      - uses: actions/download-artifact@v2
        with:
          name: registry_ubuntu

      - name: Checkout pmacct
        uses: actions/checkout@v2
        with:
          path: pmacct

      - name: Build with '${{ matrix.CONFIG_FLAGS }}'
        run: |
          docker load -i /tmp/docker/registry_ubuntu.tar
          CONTAINER_ID=$(docker run --rm -it -d -v `pwd`:`pwd` -w `pwd` -e ${{ matrix.CONFIG_FLAGS }} $BUILD_DOCKER_TAG_UBUNTU_BIONIC:latest)
          echo "Launched container id:" $CONTAINER_ID
          docker exec -i $CONTAINER_ID ./ci/script.sh
          docker stop $CONTAINER_ID
